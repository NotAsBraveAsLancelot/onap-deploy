#!/usr/bin/env python3

import argparse
import sys
import os
import json
import datetime

additional_ansible_host_flags = [
    'ansible_python_interpreter=/usr/bin/python3',
    'ansible_ssh_common_args="-o StrictHostKeyChecking=no"'
]


def handle_existing(file):
    print('checking if {file_path} exists'.format(file_path=file))
    if os.path.isfile(file):
        new_file_path = file + str(datetime.datetime.now().time())
        print('file found, renaming to {new}'.format(new=new_file_path))
        os.rename(file, new_file_path)


def get_args(argument_desc):
    parser = argparse.ArgumentParser(
        description= argument_desc)
    parser.add_argument('user', help='account used to access instances')
    parser.add_argument('ssh_key',
                        help='path to key used to access all instances')
    args = parser.parse_args(sys.argv[2:])
    return args


class StackParser(object):
    def __init__(self):
        parser = argparse.ArgumentParser(
                description='Parses output from Stack',
                usage='''stackparser <command> [<args>]
                command options are:
                host -   generates a host file
                ''')
        parser.add_argument('command', help='command to run')
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)
        getattr(self, args.command)()

    def host(self):
        args = get_args('generates a host file')
        data = json.loads(sys.stdin.read())
        self._host(data, args.user, args.ssh_key)

    @staticmethod
    def _host(data, user, ssh_key):
        handle_existing('./hosts')
        print('Generating hosts file')
        with open("./hosts", mode='w') as host_file:
            host_data = json.loads(data['networking'])['output_value']
            for host_group in host_data:
                host_file.write('[' + host_group + ']\n')
                for host in host_data[host_group]:
                    ansible_host = '{a_host} ansible_user={a_user} ' \
                                   'ansible_ssh_private_key_file={a_key}'\
                        .format(a_host=host[0], a_user=user, a_key=ssh_key)
                    for flag in additional_ansible_host_flags:
                        ansible_host += ' ' + flag
                    host_file.write(ansible_host+'\n')


if __name__ == '__main__':
    StackParser()
